import { Box, Card, CircularProgress, FormHelperText, MenuItem, Typography } from "@mui/material";
import styles from './styles.module.css';
import { buttonStyle, finishButtonStyle, ibeaconCardModel, ibeaconCardUpdateModel, mainCard } from "./stylesMui";
import Stepper from '@mui/material/Stepper';
import Step from '@mui/material/Step';
import StepLabel from '@mui/material/StepLabel';
import { styled } from '@mui/material/styles';
import Stack from '@mui/material/Stack';
import SettingsIcon from '@mui/icons-material/Settings';
import GroupAddIcon from '@mui/icons-material/GroupAdd';
import VideoLabelIcon from '@mui/icons-material/VideoLabel';
import StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';
import { StepIconProps } from '@mui/material/StepIcon';
import Check from '@mui/icons-material/Check';
import { FormControl, IconButton, InputAdornment, InputLabel, OutlinedInput, TextField,  } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { useEffect, useState } from 'react';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import Visibility from '@mui/icons-material/Visibility';
import { useTranslation } from 'react-i18next';
import {z} from 'zod';
import { zodResolver } from "@hookform/resolvers/zod";
import { set, useForm } from "react-hook-form";
import { LoginFormData, categories, formDataInfo, localData, loginFormShceme } from '../../types/types';
import EmailIcon from '@mui/icons-material/Email';
import logo from '../../assets/logo.png';
import ImageIcon from '@mui/icons-material/Image'; 
import { useRouter } from 'next/router';
import { getAllCategories, getAllLocals, getCardById, getCards, handleCreateCard, handleEmailLogin, handleUpdateCard } from '@/services/backendCalls';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import SensorsIcon from '@mui/icons-material/Sensors';
import DriveFileRenameOutlineIcon from '@mui/icons-material/DriveFileRenameOutline';
import DescriptionIcon from '@mui/icons-material/Description';
import LinkIcon from '@mui/icons-material/Link';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import LocationOnIcon from '@mui/icons-material/LocationOn';
import { FileInput } from "../DropZone";
import { useFileContext } from "@/contexts/FileContext";
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';


const ColorlibConnector = styled(StepConnector)(({ theme }) => ({
    [`&.${stepConnectorClasses.alternativeLabel}`]: {
        top: 22,
    },
    [`&.${stepConnectorClasses.active}`]: {
        [`& .${stepConnectorClasses.line}`]: {
        backgroundImage:
            'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',
        },
    },
    [`&.${stepConnectorClasses.completed}`]: {
        [`& .${stepConnectorClasses.line}`]: {
        backgroundImage:
            'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',
        },
    },
    [`& .${stepConnectorClasses.line}`]: {
        height: 3,
        border: 0,
        backgroundColor:
        theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',
        borderRadius: 1,
    },
}));

const ColorlibStepIconRoot = styled('div')<{
    ownerState: { completed?: boolean; active?: boolean };
    }>(({ theme, ownerState }) => ({
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#ccc',
    zIndex: 1,
    color: '#fff',
    width: 50,
    height: 50,
    display: 'flex',
    borderRadius: '50%',
    justifyContent: 'center',
    alignItems: 'center',
    ...(ownerState.active && {
        backgroundImage:
        'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',
        boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',
    }),
    ...(ownerState.completed && {
        backgroundImage:
        'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',
    }),
}));

function ColorlibStepIcon(props: StepIconProps) {
const { active, completed, className } = props;

const icons: { [index: string]: React.ReactElement } = {
    1: <SettingsIcon />,
    2: <AttachMoneyIcon />,
    3: <ImageIcon />,
};

return (
    <ColorlibStepIconRoot ownerState={{ completed, active }} className={className}>
    {icons[String(props.icon)]}
    </ColorlibStepIconRoot>
);
}

const steps = ['Principais Infrmações', 'Preços e Localização', 'Escolha uma Imagem'];

type UpdateCardProps = {
    id_card: number;
    onClose: () => void;
}

export default function UpdateCard({ id_card, onClose }: UpdateCardProps) {
    const[activeStep, setActiveStep] = useState(0);
    const { t } = useTranslation("global");
    const {files, setFiles} = useFileContext();
    const router = useRouter();
    const [loading, setLoading] = useState(false);
    const [dataFetched, setDatafetched] = useState(false);
    const[imageUrl, setImageUrl] = useState('');
    const [categorySelected, setcategorySelected] = useState(0);
    const [localSelected, setlocalSelected] = useState(0);
    const [hasPrice, setHasPrice] = useState(0);
    const[creatingCard, setCreatingCard] = useState(false);
    const[createdCard, setCreatedCard] = useState(false);
    const [allCategories, setAllCategoreis] = useState<categories[]>();
    const [allLocals, setAllLocals] = useState<localData[]>();
    const[localSelectedName, setLocalSelectedName] = useState('');
    const[categorySelectedName, setCategorySelectedName] = useState('');
    const [formInfo, setFormInfo] = useState<formDataInfo>({
        brute_value: 0, //feito
        desc_cupom: '', //feito
        discount_value: 0, //feito
        expiration_data: '', //feito
        has_price: 0, //feito
        ibeacon_uuid: '', //feito
        id_category: 0, //feito
        id_client: 0, //feito
        id_local: 0, //feito
        lat_cupom: '', //feito
        link_cupom: '', //feito
        lon_cupom: '', //feito
        name_cupom: '', //feito
        value_with_discount: 0
    })
    const hasPriceOptions = [
        {
            key: 0,
            desc: t('yes')
        },
        {
            key: 1,
            desc: t('no')
        }
    ]
    useEffect(()=> {
        const fetchData = async () => {
            const categoryResponse = await getAllCategories();
            setAllCategoreis(categoryResponse);
            const idClientFromSession = sessionStorage.getItem('id_client');
            setFormInfo((prev) => ({
                ...prev,
                id_client: Number(idClientFromSession)
            }))
            const localsResponse = await getAllLocals();
            const cardDataResponse = await getCardById(id_card);
            const cardData = cardDataResponse[0];
            console.log("Informações do Card: ");
            console.log(cardData.brute_value);
            if(cardData){
                setFormInfo({
                    brute_value: cardData.brute_value,
                    desc_cupom: cardData.desc_cupom,
                    discount_value: cardData.discount_value,
                    expiration_data: cardData.expiration_date,
                    has_price: cardData.has_price,
                    ibeacon_uuid: cardData.ibeacon_uuid,
                    id_category: cardData.id_category,
                    id_client: cardData.id_client,
                    id_local: cardData.id_local,
                    lat_cupom: cardData.lat_cupom,
                    lon_cupom: cardData.lon_cupom,
                    link_cupom: cardData.link_cupom,
                    name_cupom: cardData.name_cupom,
                    value_with_discount: cardData.value_with_discount
                });
                setImageUrl(cardData.img_url);
                setcategorySelected(cardData.id_category);
                setlocalSelected(cardData.id_local);
                const foundLocal = localsResponse.find(local => local.ibeacons_id_locals === localSelected);
                if (foundLocal) {
                    setLocalSelectedName(foundLocal.ibeacon_local);
                }
                const foundCategory = categoryResponse.find(category => category.id_cat === categorySelected);
                if(foundCategory){
                    setCategorySelectedName(foundCategory.name_cat);
                }
            }
            setAllLocals(localsResponse);
            setDatafetched(true);
        };
        fetchData();
    },[]);

    const handleCategorySelectChange = (event: SelectChangeEvent) => {
        const value = Number(event.target.value);
        setcategorySelected(value);
        setFormInfo(prev => ({
            ...prev,
            id_category: value
        }))
    };

    const handleLocalSelectChange = (event: SelectChangeEvent) => {
        const value = Number(event.target.value);
        setlocalSelected(value);
        setFormInfo(prev => ({
            ...prev,
            id_local: value
        }))
    };
    const handlePriceSelectChange = (event: SelectChangeEvent) => {
        const value = Number(event.target.value);
        setHasPrice(value);
        setFormInfo(prev => ({
            ...prev,
            has_price: value
        }))
    };

    const sendData = async () => {
        setCreatingCard(true);
        setFormInfo((prev) => ({
            ...prev, value_with_discount: prev.brute_value - prev.discount_value
        }))
        const response = await handleUpdateCard(formInfo, files, imageUrl, id_card);
        setCreatingCard(false);
        setCreatedCard(true);
    }

    const refreshData = () => {
        setActiveStep(0);
        setFormInfo({
            brute_value: 0, //feito
            desc_cupom: '', //feito
            discount_value: 0, //feito
            expiration_data: '', //feito
            has_price: 0, //feito
            ibeacon_uuid: '00:00:00:00', //feito
            id_category: 0, //feito
            id_client: 0, //feito
            id_local: 0, //feito
            lat_cupom: '', //feito
            link_cupom: '', //feito
            lon_cupom: '', //feito
            name_cupom: '', //feito
            value_with_discount: 0
        })
        setCreatedCard(false);
    }

    const createImageUrl = (file: File) => {
        return URL.createObjectURL(file);
    };

    return (
        <div className={styles.body}>
            {dataFetched ? (
                <div className={styles.mainContainer}>
                    <Card sx={ibeaconCardUpdateModel}>
                        <div className={ formInfo.has_price == 0 ? styles.ibeaconCardModelData : styles.ibeaconCardModelDataWhitoutPrice}>
                            <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                Identificação: {formInfo.name_cupom != '' ? formInfo.name_cupom : 'XXXXXXXX'}
                            </Typography>
                            <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                Descrição: {formInfo.desc_cupom != '' ? formInfo.desc_cupom : 'XXXXXXXX'}
                            </Typography>
                            <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                Local: {localSelectedName != '' ? localSelectedName : 'XXXXXXXX'}
                            </Typography>
                            <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                Categoria: {categorySelectedName != '' ? categorySelectedName : 'XXXXXXXX'}
                            </Typography>
                            {formInfo.has_price == 0 && (
                                <>
                                <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                    Valor bruto: {formInfo.brute_value}
                                </Typography>
                                <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                    Desconto: {formInfo.discount_value}
                                </Typography>
                                <Typography variant="h6" sx={{margin: '0 0 0 1rem'}}>
                                    Valor Final: {formInfo.value_with_discount}
                                </Typography>
                                </>
                            )}
                        </div>
                        <div className={styles.ibeaconCardModelImg}>
                            {files[0] || imageUrl != '' ? (
                                <img src={files[0] ? createImageUrl(files[0]) : imageUrl} className={styles.ibeaconCardImg}/>
                            ) : (<AddPhotoAlternateIcon sx={{ fontSize: 75}}/>)}
                        </div>
                    </Card>
                    <Card sx={mainCard}>
                    <Stepper alternativeLabel activeStep={activeStep} connector={<ColorlibConnector />}>
                        {steps.map((label) => (
                        <Step key={label}>
                            <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>
                        </Step>
                        ))}
                    </Stepper>
                        {createdCard ? (
                            <div className={styles.refreshContainer}>
                                <Typography variant="h5">
                                    Card Atualizado com sucesso!
                                </Typography>
                                <CheckCircleIcon sx={{fontSize: '3rem', color: '#F46A29'}}/>
                                <LoadingButton loading={loading} onClick={(e)=>{e.preventDefault(); refreshData(); onClose()}} sx={finishButtonStyle}>Finalizar</LoadingButton>
                            </div>
                        ) : (
                            <>
                                {activeStep == 0 && (
                                    <form className={styles.formContainer}>
                                    <div className={styles.formContentRow}>
                                        <div className={styles.formDataContent}>
                                            <FormControl sx={{minWidth: '100%' }}>
                                                <InputLabel id="demo-simple-select-helper-label">{t("local")}</InputLabel>
                                                <Select
                                                labelId="demo-simple-select-helper-label"
                                                id="demo-simple-select-helper"
                                                value={localSelected.toString()}
                                                label="category"
                                                onChange={handleLocalSelectChange} 
                                                >
                                                    {allLocals?.map((local) => (
                                                        <MenuItem key={local.ibeacons_id_locals} value={local.ibeacons_id_locals} onClick={(e) => {setLocalSelectedName(local.ibeacon_local)}}>
                                                            {local.ibeacon_local}
                                                        </MenuItem>
                                                    ))}
                                                </Select>
                                            </FormControl>
                                            <FormControl sx={{ minWidth: '100%' }}>
                                                <InputLabel id="demo-simple-select-helper-label">{t("category")}</InputLabel>
                                                <Select
                                                labelId="demo-simple-select-helper-label"
                                                id="demo-simple-select-helper"
                                                value={categorySelected.toString()}
                                                label="category"
                                                onChange={handleCategorySelectChange}
                                                
                                                >
                                                    {allCategories?.map((category) => (
                                                        <MenuItem key={category.id_cat} value={category.id_cat} onClick={(e) => {setCategorySelectedName(category.name_cat)}}>
                                                            {category.name_cat}
                                                        </MenuItem>
                                                    ))}
                                                </Select>
                                            </FormControl>
                                        </div>
                                        <div className={styles.formDataContent2}>
                                            <FormControl sx={{ width: '100%' }} variant="outlined">
                                                <InputLabel>{t("cardCode")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <DriveFileRenameOutlineIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("cardCode")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, name_cupom: e.target.value}))}}
                                                />
                                            </FormControl>
                                            <FormControl sx={{width: '100%' }} variant="outlined">
                                                <InputLabel>{t("cardDesc")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <DescriptionIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("cardDesc")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, desc_cupom: e.target.value}))}}
                                                />
                                            </FormControl>
                                        </div>
                                    </div>
                                            <FormControl sx={{width: '100%' }} variant="outlined">
                                                <InputLabel>{t("cardLink")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <LinkIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("cardName")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, link_cupom: e.target.value}))}}
                                                />
                                            </FormControl>
                                    <div style={{display: 'flex', flexDirection: 'row', gap: '1rem', justifyContent: 'center', alignItems: 'center', width: '100%'}}>
                                        <LoadingButton loading={loading} onClick={(e)=>{e.preventDefault(); setActiveStep((prev) => prev +1)}} sx={buttonStyle}>{t("next")}</LoadingButton>
                                    </div>
                                </form>
                                )}
                                {activeStep == 1 && (
                                    <form className={styles.formContainer}>
                                    <div className={styles.formContentRow}>
                                        <div className={styles.formDataContent}>
                                            <FormControl sx={{width: '100%' }} variant="outlined">
                                                <InputLabel shrink>{t("expireDate")}</InputLabel>
                                                <OutlinedInput
                                                    type='date'
                                                    label={t("expireDate")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, expiration_data: e.target.value}))}}
                                                />
                                            </FormControl>
                                            <FormControl sx={{ width: '100%' }} variant="outlined">
                                                <InputLabel>{t("localLat")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <LocationOnIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("localLat")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, lat_cupom: e.target.value}))}}
                                                />
                                            </FormControl>
                                            <FormControl sx={{ width: '100%' }} variant="outlined">
                                                <InputLabel>{t("localLng")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <LocationOnIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("localLng")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, lon_cupom: e.target.value}))}}
                                                />
                                            </FormControl>
                                        </div>
                                        <div className={styles.formDataContent2}>
                                            <FormControl sx={{minWidth: '100%' }}>
                                                <InputLabel id="demo-simple-select-helper-label">{t("hasPrice")}</InputLabel>
                                                <Select
                                                labelId="demo-simple-select-helper-label"
                                                id="demo-simple-select-helper"
                                                value={hasPrice.toString()}
                                                label={t("hasPrice")}
                                                onChange={handlePriceSelectChange} 
                                                >
                                                    {hasPriceOptions.map((option) => (
                                                        <MenuItem key={option.key} value={option.key}>
                                                            {option.desc}
                                                        </MenuItem>
                                                    ))}
                                                </Select>
                                            </FormControl>
                                            <FormControl sx={{ width: '100%' }} variant="outlined" disabled={hasPrice == 1 ? true : false}>
                                                <InputLabel>{t("bruteValue")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <AttachMoneyIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("bruteValue")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, brute_value: Number(e.target.value)}))}}
                                                />
                                            </FormControl>
                                            <FormControl sx={{width: '100%' }} variant="outlined" disabled={hasPrice == 1 ? true : false}>
                                                <InputLabel>{t("discountValue")}</InputLabel>
                                                <OutlinedInput
                                                    endAdornment={
                                                    <InputAdornment position="end">
                                                        <AttachMoneyIcon sx={{justifySelf: 'flex-end'}}/>
                                                    </InputAdornment>
                                                    }
                                                    label={t("discountValue")}
                                                    onChange={(e) => {setFormInfo((prev) => ({...prev, discount_value: Number(e.target.value)}))}}
                                                />
                                            </FormControl>
                                        </div>
                                    </div>
                                    <div style={{display: 'flex', flexDirection: 'row', gap: '1rem', justifyContent: 'center', alignItems: 'center', width: '100%'}}>
                                        <LoadingButton loading={loading} onClick={(e)=>{e.preventDefault(); setActiveStep((prev) => prev -1)}} type='submit' sx={buttonStyle}>{t("back")}</LoadingButton>
                                        <LoadingButton loading={loading} onClick={(e)=>{e.preventDefault(); setActiveStep((prev) => prev +1)}} sx={buttonStyle}>{t("next")}</LoadingButton>
                                    </div>
                                </form>
                                )}
                                {activeStep == 2 && (
                                    <form className={styles.formContainer}>
                                        <Box sx={{backgroundColor: 'rgba(232, 232, 232, 0.5)'}}>
                                                <FileInput/>
                                        </Box>
                                        <div style={{display: 'flex', flexDirection: 'row', gap: '1rem', justifyContent: 'center', alignItems: 'center', width: '100%'}}>
                                            <LoadingButton loading={loading} onClick={(e)=>{e.preventDefault(); setActiveStep((prev) => prev -1)}} type='submit' sx={buttonStyle}>{t("back")}</LoadingButton>
                                            <LoadingButton loading={creatingCard} onClick={(e)=>{e.preventDefault(); sendData()}} sx={buttonStyle}>{t("finish")}</LoadingButton>
                                        </div>
                                    </form>
                                )}
                            </>
                        )}
                    </Card>
                </div>
            ) : (
                <CircularProgress/>
            )}
        </div>
    )
}